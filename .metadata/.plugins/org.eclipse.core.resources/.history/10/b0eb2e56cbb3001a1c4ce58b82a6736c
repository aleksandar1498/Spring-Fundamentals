package bg.softuni.andreys.service.impl;

import java.util.List;
import java.util.stream.Collectors;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import bg.softuni.andreys.domain.service.ItemServiceModel;
import bg.softuni.andreys.persistence.entities.JpaCategory;
import bg.softuni.andreys.persistence.entities.JpaItem;
import bg.softuni.andreys.persistence.repositories.CategoryRepository;
import bg.softuni.andreys.persistence.repositories.ItemRepository;
import bg.softuni.andreys.service.ItemService;
import bg.softuni.andreys.utils.CategoryToEntity;

@Service
public class ItemServiceImpl implements ItemService{

	private ModelMapper mapper;
	private ItemRepository itemRepo;
	private CategoryRepository categoryRepo;
	private CategoryToEntity converter;
	@Autowired
	public ItemServiceImpl(ModelMapper mapper, ItemRepository itemRepo,CategoryRepository categoryRepo,CategoryToEntity converter) {
		this.mapper = mapper;
		this.itemRepo = itemRepo;
		this.categoryRepo = categoryRepo;
		this.mapper.addConverter(converter);
	}

	@Override
	public ItemServiceModel create(ItemServiceModel item) {
		if(this.itemRepo.findByName(item.getName()).isPresent()) {
			throw new IllegalArgumentException("Item already exists");
		}
		
		JpaItem toSave = this.mapper.map(item,JpaItem.class);
		System.out.println(toSave);
		return null;
		//return this.mapper.map(this.itemRepo.save(toSave),ItemServiceModel.class);
	}

	@Override
	public void remove(String itemId) {
		JpaItem toRemove = this.itemRepo.findById(itemId).orElseThrow(() -> {
			return new IllegalArgumentException("Item with this id does not exist");
		});
		this.itemRepo.delete(toRemove);
	}

	@Override
	public ItemServiceModel find(String itemId) {
		JpaItem found = this.itemRepo.findById(itemId).orElseThrow(() -> {
			return new IllegalArgumentException("Item with this id does not exist");
		});
		return this.mapper.map(found,ItemServiceModel.class);
	}

	@Override
	public List<ItemServiceModel> findAll() {
		return this.itemRepo.findAll().stream().map(i -> this.mapper.map(i,ItemServiceModel.class)).collect(Collectors.toList());
	}

	@Override
	public ItemServiceModel findByName(String name) {
		JpaItem item = this.itemRepo.findByName(name).orElseThrow(() ->{
			return new IllegalArgumentException("Item with this name is not found");
		});
		
		return this.mapper.map(item,ItemServiceModel.class);
	}

	@Override
	public void removeByName(String name) {
		JpaItem item = this.itemRepo.findByName(name).orElseThrow(() ->{
			return new IllegalArgumentException("Item with this name is not found");
		});
		this.itemRepo.delete(item);
	}

}
